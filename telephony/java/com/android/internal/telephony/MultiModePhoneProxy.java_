package com.android.internal.telephony;

import com.android.internal.telephony.cdma.CDMAPhone;
import com.android.internal.telephony.gsm.GSMPhone;
import android.util.Log;
import android.app.ActivityManagerNative;
import android.content.Context;
import android.content.Intent;
import android.net.LinkCapabilities;
import android.net.LinkProperties;
import android.os.AsyncResult;
import android.os.Handler;
import android.os.Message;
import android.os.SystemProperties;
import com.android.internal.telephony.CallManager;
import android.content.BroadcastReceiver;
import android.telephony.ServiceState;
import android.telephony.PhoneStateListener;
import android.content.IntentFilter;
import com.android.internal.telephony.IccCard;

import java.util.List;

public class MultiModePhoneProxy extends PhoneProxy {

	private static int EVENT_CP_CRASH = 34;
	protected static int EVENT_CSIM_READY =  27;
	private static int EVENT_EHRPD_FAIL_LTE_RESUME = 31;
	private static int EVENT_HANDOVER_FROM_EHRPD_INITIATED = 30;
	private static int EVENT_LTE_FAIL_EHRPD_RESUME =  32;
	private static int EVENT_LTE_RESET_DONE = 35;
	private static int EVENT_NV_READY = 29;
	private static int EVENT_RADIO_TECHNOLOGY_CHANGED = 1;
	private static int EVENT_SET_PREFERRED_NETWORK = 33;
	private static int EVENT_USIM_READY = 28;
	private static int EVENT_VIA_RESET_DONE = 36;
	private static String LOG_TAG = "MultiModePhoneProxy";
	public static Object lockForRadioTechnologyChange = new Object();
	static int preferredCdmaSubscription = 1;
	static int preferredNetworkMode = 4;
	
	Phone mActivePhone;
	CommandsInterface mCommandsInterfaceCDMA;
	CommandsInterface mCommandsInterfaceGSM;
	Phone mDataPhone;
	int mDataPhoneType;
	BroadcastReceiver mIntentReceiver;
	GSMPhone mLTEPhone;
	String mOutgoingPhone;
	int mPendingPreferredNetworkCnt;
	PhoneStateListener mPhoneStateListener;
	int mRadioTechnology;
	CDMAPhone meCDMAPhone;
	//MultimodeSystemAP mmmsAp;
	int oldBatteryLevel;
	int oldBatteryPlugStatus;
	
	public MultiModePhoneProxy(Phone cdmaPhone, Phone ltePhone, Context context){
		super(cdmaPhone);
		
		mPendingPreferredNetworkCnt = 0;
		oldBatteryPlugStatus = -1;
		oldBatteryLevel = -1;

		
		mActivePhone = cdmaPhone;
		meCDMAPhone = (CDMAPhone)cdmaPhone;
		mLTEPhone = (GSMPhone)ltePhone;
		
		mCommandsInterfaceCDMA = ((PhoneBase)cdmaPhone).mCM;
		mCommandsInterfaceGSM = ((PhoneBase)ltePhone).mCM;
		mCommandsInterfaceGSM.registerForVoiceRadioTechChanged(this,EVENT_VOICE_RADIO_TECH_CHANGED,null);
		//mCommandsInterfaceGSM.registerForSIMReady(this,1,null);
		//mCommandsInterfaceCDMA.registerForRUIMReady(this,1,null);
		
		handleActivePhoneSelection();
		
		mLTEPhone.getIccCard().setDualPhones((PhoneBase)ltePhone,(PhoneBase)cdmaPhone);
		meCDMAPhone.getIccCard().setDualPhones((PhoneBase)ltePhone,(PhoneBase)cdmaPhone);
		
		//mCommandsInterfaceCDMA.registerForNVReady(this,EVENT_VOICE_RADIO_TECH_CHANGED,null);
		//(TelephonyManager)context.getSystemService("phone").listen(mPhoneStateListener,65);
		//meCDMAPhone.mDataConnection.registerForHandoverInitiated(this,30,null);
		//mLTEPhone.registerForeHRPDHOfailResumeLTE(this,31,null);
		//meCDMAPhone.registerForLTEHOfailResumeHRPH(this,0x20,null);
		
		//mLTEPHONE.mSIMRecords.registerForRecordsLoaded(meCDMAPhone.mDataConnection,0x3a,mLTEPhone.mSIMRecords);
		//mCommandsInterfaceGSM.setOnCpCrash(this,0x22,null);
		//mCommandsInterfaceCDMA.setOnCpCrash(this,0x22,null);
		
		IntentFilter filter = new IntentFilter();
		filter.addAction("android.intent.action.BATTERY_CHANGED");
		filter.addAction("android.intent.action.RILD_CRASH");
		context.registerReceiver(mIntentReceiver,filter);
	}
	
	private void SelectActivePhone(String mode){
		loge("Active Phone call from SelectActivePhone, bCastReceived: " + mode.toString());
		int modeVal = handleActivePhoneSelection();
		meCDMAPhone.setPreferredNetworkType(modeVal, null);
		mLTEPhone.setPreferredNetworkType(modeVal, null);
	}
	
	private int handleActivePhoneSelection(){
		int mode = getNetworkSelectionMode();
		
		switch(mode){
			case Phone.PHONE_TYPE_CDMA:
				mActivePhone = meCDMAPhone;
				mDataPhone = meCDMAPhone;
				loge("Active Phone in MMproxy is meCDMAPhone");
				break;
			case Phone.PHONE_TYPE_GSM:
				mActivePhone = mLTEPhone;
				mDataPhone = mLTEPhone;
				loge("Active Phone in MMproxy is mLTEPhone");
				break;
			default:
				loge("Not Supported Network Mode");
				break;
		}
		setActivePhone(mActivePhone);

	      return mode;
	}

	private boolean isSMSFormat3GPP2(){
		//String smsFormat = IMSICCSmsInterfaceManager.readSmsSetting("smsformat");
		
		if(IccCard.isSMSFormat3GPP()){
			return false;
		}else{
			return true;
		}
	}
	
	private void logd(String msg){
		Log.d("[MultiModePhoneProxy]","[PhoneProxy]" + msg.toString());
	}
	
	private void loge(String msg){
		Log.e("[MultiModePhoneProxy]","[PhoneProxy]" + msg.toString());
	}
	
	private int mapDataType(ServiceState ss){
		int mapVal = getRadioTechnology();
		int radioTechnology = ServiceState.RIL_RADIO_TECHNOLOGY_1xRTT;;
		
		/*switch(mapVal){
			case:
				radioTechnology = 4;
			case:
				radioTechnology = 3;
			case:
				radioTechnology = 4;
			case:
				radioTechnology = 2;
			default:
				loge("Not Supported Technology");
		}*/
		
		return radioTechnology;
	}
		
	private void refreshRild(Intent intent){
		if(intent.getIntExtra("PHONE_TYPE",0) == 1){
			mCommandsInterfaceCDMA.setRadioPower(false,null);
		}else if(intent.getIntExtra("PHONE_TYPE",0) == 2){
			mCommandsInterfaceGSM.setRadioPower(false,null);
		}
	}
	private void sendBatteryInfo(Intent intent){
	///////// to do
	}
	
	public boolean IsEmergencyCallingSupported(){
		if(getNetworkSelectionMode() == 8){
			return false;
		}else{
			return true;
		}
	}
	
	public void NotifyMultimodechange(String mode){
		SelectActivePhone(mode);
	}
	
	public int disableApnType(String type){
		return mDataPhone.disableApnType(type);
	}
	
/*	public boolean disableDataConnectivity(){
		return mDataPhone.disableDataConnectivity();
	}*/
	
	
	public int enableApnType(String type){
		return mDataPhone.enableApnType(type);
	}
	
/*	public boolean enableDataConnectivity(){
		return mDataPhone.enableDataConnectivity();
	}*/
	
/*	public boolean explicitDetach(int reAttachFlag, int reason){
		return mDataPhone.explicitDetach(reAttachFlag, reason);
	}*/
	
/*	public String getActiveApn(){
		return mDataPhone.getActiveApn();
	}*/
	
	@Override
	public String[] getActiveApnTypes(){
		return mDataPhone.getActiveApnTypes();
	}
	
	public DataState getActiveDataConnectionState(){
		return getDataConnectionState();
	}
	
	public ServiceState getActiveServiceState(){
		return mDataPhone.getServiceState();
	}
	
	public boolean getAutoConnectEnable(){
		return true;
	}
	
	public void getAvailableNetworks(Message response){
		mLTEPhone.getAvailableNetworks(response);
	}
	
	public CDMAPhone getCdmaPhone(){
		return meCDMAPhone;
	}
	
/*	public List getCurrentDataConnectionList(){
		/////////////////fixme
		
		return mDataPhone.getCurrentDataConnectionList();
	}*/
	
	public DataActivityState getDataActivityState(){
		return mDataPhone.getDataActivityState();
	}
	
	/*public float getDataConnectedTime(){
		return mDataPhone.getDataConnectedTime();
	}*/
	
	@Override
	public DataState getDataConnectionState(){
		return mDataPhone.getDataConnectionState();
	}
	
	public Phone getDataPhone(){
		if(mRadioTechnology == 0xd){
			return mLTEPhone;
		}else{
			return meCDMAPhone;
		}
	}
	
	public int getDataPhoneType(){
		mDataPhoneType = mapDataType(mActivePhone.getServiceState());
		return mDataPhoneType;
	}
	
/*	public void getDataProfile(Message response){
		mDataPhone.getDataProfile(response);
	}*/
	
	public boolean getDataRoamingEnabled(){
		return mDataPhone.getDataRoamingEnabled();
	}
	
/*	public String[] getDnsServers(String apnType){
		return mDataPhone.getDnsServers(apnType);
	}*/
	
/*	public String getGateway(String apnType){
		return mDataPhone.getGateway(apnType);
	}*/
	
	public GSMPhone getGsmPhone(){
		return mLTEPhone;
	}
	
	public String getIccSerialNumber(){
		logd("getIccSerialNumber()");
		return mLTEPhone.getIccSerialNumber();
	}
	
	public IccSmsInterfaceManager getIccSmsInterfaceManager(){
		if(isSMSFormat3GPP2()){
			return meCDMAPhone.getIccSmsInterfaceManager();
		}else{
			return mLTEPhone.getIccSmsInterfaceManager();
		}
	}
	
/*	public String getInterfaceName(String apnType){
		return mDataPhone.getInterfaceName(apnType);
	}
	
	public String getIpAddress(String apnType){
		return mDataPhone.getIpAddress(apnType);
	}
	
	public int getIpAddressType(String apnType){
		return mDataPhone.getIpAddressType(apnType);
	}*/
	
	/*public String getNetMask(String apnType){
		return mDataPhone.getNetMask(apnType);
	}*/
	
	public int getNetworkSelectionMode(){
		/*int retMode = -1;
		setNetworkSelectionMode(mmsAp.getModeType());
		
		if(mNetworkSelectionMode.equals("LTE")){
			retMode = 8;
		}else if(mNetworkSelectionMode.equals("CDMA")){
			retMode = 9;
		}else if(mNetworkSelectionMode.equals("GLOBAL")){
			retMode = 7;
		}*/
		
		return 9;
	}
	
	public int getRadioTechnology(){
		return mRadioTechnology;
	}
	
/*	public boolean getSMSavailable(){
		if(isSMSFormat3GPP2()){
			return meCDMAPhone.getSMSavailable();
		}else{
			return mLTEPhone.getSMSavailable();
		}
	}*/
	
	public void getSmscAddress(Message result){
		if(isSMSFormat3GPP2()){
			meCDMAPhone.getSmscAddress(result);
		}else{
			mLTEPhone.getSmscAddress(result);
		}
	}
	
	public String getSubscriberId(){
		logd("getSubsciberId()");
		return mLTEPhone.getSubscriberId();
	}

	
//	public void handleMessage(Message msg){
		
		
}	
	
	
	
	
	
